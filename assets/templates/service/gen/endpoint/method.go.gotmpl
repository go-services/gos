// Code generated by gos. DO NOT EDIT
package endpoint
import (
	"context"
	"github.com/go-kit/kit/endpoint"
	service "{{ .RootPkg }}"
	"{{ .RootPkg }}/gen/endpoint/definitions"
	{{ range $key, $value := .MiddlewarePackages }} {{$value}} "{{$key}}" {{ end }}
)

type {{ .Name }}Endpoint interface {
	Middleware(...definitions.{{ .Name }}EndpointMiddleware)
	Endpoint() endpoint.Endpoint
	Set(definitions.{{ .Name }}EndpointFunc)
}
type {{ toLowerFirst .Name }} struct {
	endpoint         definitions.{{ .Name }}EndpointFunc
	middleware       []definitions.{{ .Name }}EndpointMiddleware
	globalMiddleware []endpoint.Middleware
}

func make{{ .Name }}Endpoint(svc service.{{ .ServiceInterfaceName }}, global ...endpoint.Middleware) {{ .Name }}Endpoint {
	return &{{ toLowerFirst .Name }}{
		endpoint:         {{ toLowerFirst .Name }}Endpoint(svc),
		middleware:[]definitions.{{ .Name }}EndpointMiddleware{
		{{range .Middlewares}} {{if eq .Alias "" }} service{{else}}{{.Alias}}{{end}}.{{.Method}},{{end}}
		},
		globalMiddleware: global,
	}
}

func {{ toLowerFirst .Name }}Endpoint(b service.{{ .ServiceInterfaceName }}) definitions.{{ .Name }}EndpointFunc {
	return func(ctx context.Context{{  if .Request }}, req {{ with index .Params 1 }} {{ .Type}} {{ end }} {{ end }}) (definitions.{{ .Name }}Response, error) {
		{{  if .Response }} res, {{ end }} err := b.{{ .Name }}(ctx{{ if .Request }}, req {{ end }})
		return definitions.{{ .Name }}Response{{"{"}}{{  if .Response }}Response:res, {{ end }}Err: err}, nil
	}
}

func (e *{{ toLowerFirst .Name }}) Endpoint() endpoint.Endpoint {
	ep := e.endpoint
	for left, right := 0, len(e.middleware)-1; left < right; left, right = left+1, right-1 {
		 e.middleware[left],  e.middleware[right] =  e.middleware[right],  e.middleware[left]
	}
	for _, mdw := range e.middleware {
		ep = mdw(ep)
	}
	kitEp := func(ctx context.Context, request interface{}) (response interface{}, err error) {
        {{ if .Request }}req := request.({{ with index .Params 1 }} {{ .Type }} {{ end }}) {{ end }}
        return ep(ctx{{ if  .Request }}, req{{ end }})
	}
	for left, right := 0, len(e.globalMiddleware)-1; left < right; left, right = left+1, right-1 {
		 e.globalMiddleware[left],  e.globalMiddleware[right] =  e.globalMiddleware[right],  e.globalMiddleware[left]
	}
	for _, mdw := range e.globalMiddleware {
		kitEp = mdw(kitEp)
	}
	return kitEp
}

func (e *{{ toLowerFirst .Name }}) Set(endpoint definitions.{{ .Name }}EndpointFunc) {
	e.endpoint = endpoint
}

func (e *{{ toLowerFirst .Name }}) Middleware(mdw ...definitions.{{ .Name }}EndpointMiddleware) {
	e.middleware = append(e.middleware, mdw...)
}
