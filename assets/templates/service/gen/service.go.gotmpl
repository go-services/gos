// Code generated by gos. DO NOT EDIT
package gen
{{$rootPkg :=  .RootPkg}}
import (
    "{{ .RootPkg }}/gen/endpoint"
    "{{.RootPkg }}/gen/transport"
    genService "{{.RootPkg }}/gen/service"
    generatedTransport "{{ .RootPkg }}/gen/transport/http"
    service "{{ .RootPkg }}"
    kitEndpoint "github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/transport/http"
{{ range $key, $value := .MiddlewarePackages }} {{ if not (eq $rootPkg $key) }} {{$value}} "{{$key}}" {{ end }} {{ end }}
)

type serviceTransport struct {
    http generatedTransport.Transport
}

func (b *serviceTransport) HTTP() generatedTransport.Transport {
    return b.http
}

func MakeService(svc service.{{ .InterfaceName }}, mdw ...genService.Middleware) service.{{ .InterfaceName }} { {{if gt (len .Middlewares) 0}}
    mdw = append([]genService.Middleware{
{{range .Middlewares}} {{if eq .Alias "" }} service{{else}}{{.Alias}}{{end}}.{{.Method}}(),{{end}}
}, mdw...)
{{end}}
    for _, m := range mdw {
        svc = m(svc)
    }
    return svc
}

func MakeTransports(endpoints endpoint.Endpoints, httpOptions ...http.ServerOption) transport.Transports {
    httpTransport := generatedTransport.MakeHttpTransport(endpoints, httpOptions...)
    return &serviceTransport{
        http: httpTransport,
    }
}

func MakeEndpoints(b service.{{ .InterfaceName }}, global ...kitEndpoint.Middleware) endpoint.Endpoints {
    serviceEndpoints := endpoint.MakeEndpoints(b, global...)
    return serviceEndpoints
}
